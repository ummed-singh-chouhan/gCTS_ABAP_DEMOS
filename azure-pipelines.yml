# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
stages:
  - stage: Download_Piper
    jobs:
      - job: downloadPiper
        pool:
          vmImage: ubuntu-latest
        steps:
        - checkout: none
        - task: Cache@2
          inputs:
            key: piper-cli-official
            path: bin
            cacheHitVar: FOUND_PIPER
          displayName: Cache piper cli binary
        - script: |
              mkdir -p bin
              curl -L --output bin/piper https://github.com/SAP/jenkins-library/releases/latest/download/piper_master
              chmod +x bin/piper
          condition: ne(variables.FOUND_PIPER, 'true')
          displayName: 'Download Piper'
        - script: bin/piper version
          displayName: 'Piper Version'

####### Piper Libraries #####
  - stage: gCTDS_Deploy
    jobs:
    - job: gctsDeploy
      #variables:
      #- group: development
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Cache@2
        inputs:
          key: piper-cli-official
          path: bin 
        displayName: gCTS Deploy
      #- script: |
          #bin/piper gctsDeploy --verbose --client $(ABAP-CLIENT) --host $(ABAP-HOST) --password $(ABAP-PW) --repository $(GCTS-REPO) --username $(DEMOCREDS) --remoteRepositoryURL $(REPO-URL) --vSID $(SID) --commit "0d264a0"
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
              
            echo 'Hello world'
              
            bin/piper gctsDeploy --verbose --client $(ABAP-CLIENT) --host $(ABAP-HOST) --password $(ABAP-PW) --repository $(GCTS-REPO) --username $(DEMOCREDS) --remoteRepositoryURL $(REPO-URL) --vSID $(SID) --commit "0d264a0"